# -*- coding: utf-8 -*-
"""MNISTdigit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ga1YrCIMEBluyA160fwFZW4KKEl7t0y5

Model for SUDOKU Digit Recognition
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import LearningRateScheduler

"""Here we will first train the model on **MNIST data** then it will be trained on our data for sudoku digit recognition."""

#Unzip the file train.csv
!unzip /content/data.zip

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
image = load_img('/content/rot/img001-00001.png')
array = img_to_array(image)
array.shape

img_width,img_height = 28,28
batch_size = 64
train_data_dir = '/content/data'
train_datagen = ImageDataGenerator(rescale=1./255,
    shear_range=0.1,
    zoom_range=0.2,
    width_shift_range=0.1,
    height_shift_range=0.1,
    validation_split=0.1)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    color_mode="grayscale",
    subset='training')
validation_generator = train_datagen.flow_from_directory(
    train_data_dir, # same directory as training data
    target_size=(img_width, img_height),
    color_mode="grayscale",
    batch_size=batch_size,
    subset='validation')

model = Sequential()

model.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))
model.add(BatchNormalization())
model.add(Conv2D(32, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.4))

model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(9, activation='softmax'))

# COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST
model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

#Training the model
history = model.fit_generator(train_generator,steps_per_epoch=int(train_generator.samples/64),
                              epochs=10,validation_data=validation_generator,
                              validation_steps=int(validation_generator.samples/64))

import cv2
image = cv2.imread("/content/data/2/img003-00008.png")
image1 = cv2.imread("/content/data/1/img002-00007.png")
 
image = cv2.resize(image,(28,28),interpolation=cv2.INTER_AREA)
image1 = cv2.resize(image1,(28,28),interpolation=cv2.INTER_AREA)
image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
image1 = cv2.cvtColor(image1,cv2.COLOR_BGR2GRAY)


preds = model.predict([image.reshape(-1,28,28,1)])
for cls in train_generator.class_indices:
    print(""+str(cls)+": "+str(preds[0][train_generator.class_indices[cls]]))

model.save('digit.model')